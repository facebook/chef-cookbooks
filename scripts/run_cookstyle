#!/bin/bash
#
# vim: syntax=ruby:expandtab:shiftwidth=2:softtabstop=2:tabstop=2
#
# Copyright (c) 2016-present, Facebook, Inc.
# All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eu

usage() {
  cat <<EOF
Usage:
   $0 [<config>]]
   $0 -C [<options>] [<file>...]

By default this script runs in backwards-compatibility mode where
the only arguments is a config. However, if you pass in -C, it will
parse options, and you can pass in a config with -c, and any additional
arguments will be passed as files/dirs to be linted.

Options:
  -a            Enable autocorrect
  -C            Disable compatibility mode
  -c <config>   Use <config> file for cookstyle
  -h            Print this message and exist
EOF
}

CONFIG='.cookstyle_combined.yml'
ME=$(realpath "$0")
MY_DIR=$(dirname "$ME")
# `cookstyle -r FOO` expects FOO to be absolute
RULES_DIR="${MY_DIR}/../cookstyle/"
AUTOCORRECT=0
COMPAT_MODE=1

while getopts 'ac:Ch' opt; do
  case "$opt" in
    a)
      AUTOCORRECT=1
      ;;
    c)
      CONFIG="$OPTARG"
      ;;
    C)
      COMPAT_MODE=0
      ;;
    h)
      usage
      exit 0
      ;;
    \?)
      echo "Unknown option: -$OPTARG" >&2
      exit 1
      ;;
  esac
done

# shift away args we parsed, what's left should be a config
# file, if anything
shift "$((OPTIND - 1))"

if bundle exec cookstyle --version > /dev/null 2>&1; then
  COOKSTYLE='bundle exec cookstyle'
elif [ -x /opt/chef-workstation/embedded/bin/cookstyle ]; then
  COOKSTYLE='/opt/chef-workstation/embedded/bin/cookstyle'
else
  echo 'Cannot find cookstyle!'
  exit 1
fi

if [ "$COMPAT_MODE" -eq 1 ]; then
  if [ "$#" -eq 1 ]; then
    CONFIG="$1"
    shift
  elif [ "$#" -ne 0 ]; then
    usage
    exit 1
  fi
fi

if [ ! -r "$CONFIG" ]; then
  echo "Cannot read config config: $CONFIG"
  exit 1
fi

declare -a options
if [ "$AUTOCORRECT" -eq 1 ]; then
  options+=("-a")
fi

exec $COOKSTYLE --display-cop-names -r "$RULES_DIR/helpers.rb" -c "$CONFIG" "${options[@]}" "$@"
